/******************** Includes ********************/
#pragma region

#include <Arduino.h>
#include <IRremote.h>
#include <ArduinoJson.h>

#pragma endregion

/******************** Defines and Constants ********************/
#pragma region

// #define SEND_PWM_BY_TIMER
// #define USE_NO_SEND_PWM
#define JSON_DOC_SIZE 256
#define HVAC_SIGNAL_SIZE 349
#define TV_SIGNAL_SIZE 71

// Used Pins
const int irPins[4] = {2, 3, 4, 5};

#pragma endregion

/******************** Serial RX global variables ********************/
#pragma region

// Received values on serial
String rxBuffer = "";
String commandSubsystem = "";
String commandType = "";
int commandValue = "";
int commandPort = "";

#pragma endregion

/******************** IR Codes ********************/
#pragma region

// HVAC (Samsung)
const PROGMEM uint16_t hvacPowerSignals[][HVAC_SIGNAL_SIZE] = {
    /* AC Power Off */ {592, 17732, 2988, 8952, 488, 512, 480, 1500, 516, 484, 484, 508, 508, 484, 508, 484, 488, 508, 508, 484, 508, 484, 512, 1472, 512, 484, 508, 484, 508, 1500, 464, 1520, 484, 516, 480, 1500, 508, 1476, 516, 1472, 516, 1468, 516, 1472, 512, 484, 512, 488, 504, 484, 484, 508, 508, 484, 508, 512, 484, 512, 480, 512, 456, 536, 456, 536, 480, 512, 480, 516, 480, 512, 484, 508, 484, 508, 484, 512, 484, 508, 484, 508, 484, 508, 488, 508, 484, 508, 512, 480, 512, 480, 512, 508, 488, 504, 484, 508, 480, 516, 476, 516, 480, 512, 484, 512, 512, 480, 512, 480, 512, 480, 512, 480, 512, 1468, 516, 1472, 516, 2972, 2980, 8944, 504, 1480, 504, 512, 480, 512, 456, 536, 456, 540, 452, 540, 480, 512, 480, 512, 484, 512, 480, 1504, 484, 508, 484, 508, 484, 1504, 484, 508, 484, 1504, 480, 1508, 476, 1532, 456, 1532, 452, 1536, 476, 1508, 476, 516, 480, 516, 476, 516, 476, 516, 476, 516, 476, 520, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 468, 524, 472, 548, 444, 548, 444, 552, 468, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 468, 528, 468, 548, 444, 552, 440, 552, 464, 528, 468, 524, 468, 524, 472, 2992, 2964, 9004, 444, 1540, 444, 524, 472, 520, 472, 524, 468, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 1568, 420, 572, 444, 552, 440, 552, 444, 548, 444, 548, 444, 548, 448, 1540, 444, 1544, 444, 1540, 444, 1544, 440, 1544, 444, 1540, 444, 1572, 416, 1568, 424, 1564, 440, 552, 444, 548, 444, 548, 444, 1544, 444, 1540, 444, 1544, 444, 548, 444, 548, 444, 548, 448, 548, 444, 548, 444, 548, 444, 1572, 416, 576, 416, 576, 416, 1596, 416, 552, 440, 552, 444, 548, 428, 1584, 416, 552, 424, 568, 444, 548, 420, 572, 420, 576, 416, 576, 420, 572, 420, 600, 392, 604, 412, 1596, 392, 1596, 392}};
const PROGMEM uint16_t hvacTempSignals[][HVAC_SIGNAL_SIZE] = {
    /* AC Temp 18 */ {568, 17780, 3028, 8912, 504, 516, 480, 1500, 512, 488, 504, 488, 508, 484, 508, 484, 508, 484, 512, 480, 512, 484, 508, 1476, 508, 484, 512, 508, 480, 1500, 488, 512, 480, 512, 456, 1524, 488, 1500, 512, 1472, 516, 1472, 512, 1472, 516, 484, 484, 508, 484, 508, 508, 488, 484, 508, 484, 532, 480, 516, 456, 536, 476, 516, 480, 512, 480, 516, 480, 512, 484, 508, 484, 508, 484, 512, 508, 484, 508, 484, 484, 508, 488, 508, 484, 508, 508, 484, 508, 484, 508, 488, 508, 508, 480, 516, 456, 536, 456, 536, 456, 540, 456, 536, 476, 516, 480, 512, 484, 508, 484, 1496, 492, 1496, 492, 1492, 492, 1500, 508, 2956, 2976, 8964, 508, 1480, 508, 508, 456, 536, 456, 536, 456, 536, 480, 516, 480, 512, 508, 484, 508, 484, 488, 1476, 508, 508, 508, 484, 488, 1476, 532, 484, 508, 1480, 504, 1504, 460, 1524, 460, 1528, 480, 1504, 484, 1504, 484, 508, 484, 508, 484, 512, 480, 512, 480, 512, 484, 512, 480, 512, 480, 516, 476, 516, 476, 516, 480, 512, 480, 540, 452, 540, 452, 544, 460, 532, 476, 516, 476, 516, 476, 520, 468, 524, 472, 520, 472, 520, 472, 524, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 472, 528, 464, 548, 444, 552, 464, 528, 468, 524, 468, 524, 468, 524, 472, 524, 468, 3020, 2940, 8976, 468, 1516, 472, 520, 472, 524, 468, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 552, 440, 1548, 464, 528, 464, 528, 468, 524, 468, 524, 468, 1544, 444, 1540, 444, 524, 468, 1544, 444, 1516, 472, 1516, 468, 1520, 464, 1568, 420, 1568, 444, 1544, 440, 1544, 444, 524, 468, 524, 468, 528, 468, 1540, 444, 1540, 448, 1540, 444, 528, 464, 528, 464, 552, 444, 572, 420, 576, 416, 576, 444, 1544, 444, 548, 444, 548, 444, 1544, 444, 1540, 444, 548, 444, 1544, 444, 1540, 444, 548, 448, 544, 448, 548, 444, 548, 444, 576, 420, 572, 420, 572, 420, 1568, 444, 1544, 444, 1540, 444, 1540, 444},
    /* AC Temp 19 */ {572, 17820, 3008, 8932, 460, 540, 480, 1500, 516, 484, 508, 484, 508, 484, 508, 484, 512, 484, 508, 484, 508, 484, 508, 1476, 512, 484, 508, 484, 508, 1500, 488, 508, 480, 516, 480, 1500, 480, 1504, 508, 1476, 520, 1468, 516, 1468, 516, 484, 508, 484, 512, 480, 508, 488, 508, 484, 508, 484, 508, 512, 480, 512, 456, 540, 476, 516, 480, 512, 476, 516, 480, 512, 508, 488, 508, 484, 484, 508, 504, 488, 508, 484, 508, 488, 484, 508, 484, 508, 484, 512, 504, 488, 484, 508, 484, 536, 456, 536, 460, 532, 480, 516, 476, 516, 480, 512, 480, 512, 484, 508, 488, 1496, 488, 1496, 492, 1492, 516, 1476, 508, 2976, 2984, 8936, 484, 1500, 508, 516, 456, 536, 480, 512, 456, 536, 456, 536, 456, 540, 476, 516, 480, 512, 484, 1496, 516, 484, 508, 484, 508, 1472, 516, 480, 516, 1452, 532, 1472, 512, 1476, 512, 1476, 492, 1492, 504, 1484, 508, 508, 508, 484, 508, 484, 508, 484, 512, 480, 512, 484, 508, 484, 508, 484, 508, 484, 504, 492, 508, 484, 508, 508, 484, 512, 456, 536, 456, 536, 456, 536, 480, 516, 480, 512, 480, 512, 484, 508, 484, 508, 484, 512, 480, 512, 484, 508, 484, 512, 480, 512, 480, 512, 480, 516, 476, 516, 476, 516, 480, 540, 452, 540, 452, 544, 472, 520, 476, 516, 476, 516, 472, 2992, 2964, 8980, 468, 1516, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 1560, 428, 548, 468, 524, 468, 1544, 444, 1544, 444, 524, 468, 1540, 448, 520, 472, 1540, 444, 1520, 468, 1516, 468, 1516, 468, 1572, 416, 1568, 444, 1540, 444, 1544, 444, 524, 468, 524, 472, 524, 468, 1540, 444, 1544, 444, 1540, 444, 524, 472, 520, 472, 524, 468, 548, 444, 576, 416, 1568, 444, 1544, 444, 548, 444, 548, 444, 1544, 444, 1540, 444, 548, 448, 1540, 444, 1540, 448, 544, 448, 548, 444, 548, 444, 548, 448, 572, 420, 572, 420, 576, 416, 1568, 444, 1544, 444, 1540, 444, 1544, 440},
    /* AC Temp 20 */ {588, 17824, 3008, 8932, 484, 512, 480, 1504, 512, 484, 484, 508, 488, 532, 484, 484, 508, 484, 484, 508, 512, 480, 512, 1476, 508, 484, 512, 480, 508, 1500, 488, 512, 460, 532, 456, 1524, 484, 1504, 508, 1476, 488, 1500, 508, 1476, 488, 508, 484, 512, 484, 508, 484, 508, 484, 512, 484, 508, 484, 536, 456, 536, 480, 512, 480, 512, 456, 536, 456, 540, 456, 536, 484, 508, 488, 504, 488, 504, 512, 484, 508, 484, 512, 480, 488, 504, 512, 480, 512, 484, 512, 480, 512, 480, 512, 508, 484, 508, 480, 512, 468, 528, 476, 516, 480, 512, 480, 512, 484, 508, 512, 1452, 532, 1456, 532, 1452, 532, 1456, 528, 2960, 2996, 8940, 508, 1480, 480, 536, 456, 536, 456, 536, 456, 536, 480, 516, 480, 512, 480, 512, 484, 508, 484, 1504, 480, 512, 484, 512, 480, 1504, 480, 516, 480, 1504, 480, 1508, 476, 1536, 448, 1536, 452, 1536, 472, 1512, 476, 516, 476, 520, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 472, 520, 472, 520, 472, 524, 468, 524, 468, 552, 440, 552, 444, 548, 444, 548, 472, 524, 468, 524, 468, 524, 472, 520, 472, 520, 472, 524, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 524, 468, 552, 444, 548, 468, 524, 468, 524, 472, 524, 468, 524, 472, 2992, 2964, 9000, 444, 1544, 444, 520, 472, 524, 468, 524, 468, 524, 468, 528, 468, 524, 468, 524, 468, 524, 468, 1572, 440, 528, 464, 528, 468, 524, 468, 524, 472, 1540, 444, 1540, 444, 528, 468, 1540, 444, 1544, 444, 1540, 444, 1544, 444, 1568, 416, 1568, 444, 1544, 440, 1544, 444, 548, 444, 548, 448, 548, 444, 1540, 444, 1544, 444, 1540, 444, 548, 444, 548, 448, 548, 444, 548, 444, 548, 448, 572, 420, 576, 416, 1568, 420, 572, 444, 1544, 440, 1544, 444, 548, 444, 1544, 444, 1568, 416, 548, 444, 552, 420, 572, 420, 572, 432, 560, 420, 600, 396, 600, 416, 1596, 392, 1592, 392, 1592, 396, 1592, 392},
    /* AC Temp 21 */ {644, 17748, 3064, 8876, 556, 460, 540, 1448, 544, 448, 544, 448, 544, 448, 544, 452, 540, 452, 544, 448, 544, 448, 544, 1444, 540, 452, 544, 448, 544, 1468, 516, 476, 500, 496, 500, 1484, 540, 1448, 544, 1440, 544, 1440, 544, 1444, 544, 448, 544, 448, 544, 448, 544, 452, 544, 448, 544, 448, 544, 476, 516, 476, 472, 524, 496, 496, 532, 460, 536, 456, 544, 448, 548, 448, 544, 448, 544, 448, 544, 448, 544, 448, 548, 448, 540, 452, 544, 448, 544, 448, 544, 452, 540, 452, 540, 480, 516, 476, 444, 548, 496, 496, 508, 488, 536, 456, 540, 452, 544, 448, 544, 1420, 564, 1424, 560, 1424, 564, 1444, 540, 2924, 3032, 8908, 536, 1448, 512, 508, 484, 508, 428, 564, 472, 520, 476, 516, 504, 488, 512, 484, 516, 476, 512, 1472, 512, 480, 512, 484, 508, 1476, 512, 480, 512, 1476, 508, 1476, 508, 1508, 428, 1556, 452, 1536, 476, 1508, 504, 488, 508, 484, 508, 484, 508, 488, 504, 488, 504, 488, 504, 492, 500, 492, 500, 492, 500, 492, 472, 524, 472, 548, 444, 548, 444, 548, 468, 524, 472, 524, 468, 524, 468, 524, 472, 520, 476, 516, 472, 524, 472, 520, 472, 520, 472, 524, 468, 524, 472, 520, 472, 520, 472, 524, 468, 524, 468, 524, 472, 548, 444, 548, 468, 524, 472, 524, 468, 524, 468, 524, 472, 2996, 2960, 8976, 468, 1520, 468, 548, 444, 548, 444, 548, 444, 548, 448, 548, 444, 548, 444, 548, 444, 548, 448, 1568, 440, 548, 448, 548, 444, 1540, 448, 1540, 444, 548, 448, 1540, 444, 548, 444, 1540, 444, 1544, 444, 1540, 444, 1544, 444, 1568, 416, 1568, 444, 1544, 444, 1540, 444, 548, 448, 548, 444, 548, 444, 1540, 444, 1544, 444, 1540, 444, 548, 444, 552, 444, 548, 444, 548, 444, 576, 416, 1572, 416, 576, 416, 1568, 420, 600, 392, 1568, 420, 1568, 416, 600, 392, 1592, 396, 1592, 392, 600, 392, 600, 396, 600, 392, 600, 392, 628, 364, 628, 392, 604, 388, 1596, 392, 1592, 392, 1596, 392, 1592, 392},
    /* AC Temp 22 */ {588, 17808, 3028, 8912, 500, 516, 480, 1500, 516, 484, 508, 484, 508, 484, 508, 488, 508, 484, 508, 480, 512, 484, 508, 1480, 508, 508, 484, 512, 480, 1500, 484, 516, 476, 516, 452, 1528, 484, 1500, 516, 1472, 512, 1472, 516, 1468, 516, 484, 508, 484, 508, 484, 512, 484, 508, 484, 508, 512, 484, 508, 456, 536, 480, 516, 476, 516, 476, 516, 504, 488, 508, 484, 508, 488, 484, 508, 508, 484, 508, 484, 484, 508, 512, 484, 508, 484, 508, 484, 484, 508, 508, 488, 484, 536, 480, 512, 456, 536, 476, 516, 480, 512, 480, 516, 480, 512, 480, 512, 508, 484, 508, 1472, 492, 1496, 512, 1476, 512, 1476, 484, 2996, 2988, 8932, 488, 1520, 464, 536, 480, 512, 456, 536, 460, 536, 472, 520, 480, 512, 512, 480, 512, 480, 512, 1452, 536, 480, 512, 480, 512, 1452, 532, 484, 508, 1476, 512, 1480, 504, 1480, 476, 1508, 480, 1508, 504, 1480, 532, 484, 508, 484, 508, 484, 508, 484, 512, 480, 512, 484, 484, 508, 484, 508, 484, 512, 480, 512, 484, 512, 480, 536, 456, 536, 456, 536, 456, 540, 476, 516, 480, 512, 480, 512, 484, 512, 484, 508, 480, 512, 480, 516, 476, 516, 476, 516, 476, 516, 480, 516, 476, 516, 472, 524, 468, 548, 444, 548, 444, 552, 444, 548, 468, 524, 468, 524, 472, 524, 468, 524, 468, 3020, 2940, 9000, 444, 1544, 444, 520, 472, 524, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 552, 440, 1568, 444, 524, 468, 528, 468, 1540, 448, 1540, 444, 524, 468, 1540, 448, 520, 472, 1540, 444, 1520, 468, 1516, 468, 1540, 444, 1572, 440, 1544, 444, 1544, 440, 1544, 444, 548, 444, 548, 448, 548, 444, 1540, 444, 1544, 444, 1540, 448, 544, 448, 544, 448, 548, 444, 576, 416, 576, 420, 572, 420, 1568, 444, 1540, 444, 548, 444, 1544, 444, 1540, 444, 548, 444, 1544, 444, 1540, 420, 572, 444, 552, 440, 552, 420, 600, 392, 600, 420, 576, 416, 576, 416, 1596, 392, 1592, 392, 1592, 396, 1592, 392},
    /* AC Temp 23 */ {568, 17824, 3008, 8912, 480, 540, 476, 1504, 512, 484, 512, 480, 512, 480, 512, 480, 512, 484, 508, 484, 512, 480, 512, 1476, 508, 484, 508, 488, 508, 1496, 488, 512, 456, 536, 456, 1524, 484, 1504, 488, 1496, 516, 1472, 512, 1472, 516, 484, 508, 484, 508, 484, 512, 480, 508, 488, 508, 484, 508, 512, 480, 512, 452, 540, 480, 512, 456, 536, 456, 540, 476, 516, 504, 484, 512, 484, 508, 484, 512, 484, 508, 484, 508, 484, 512, 480, 512, 480, 512, 484, 508, 484, 508, 484, 512, 508, 484, 508, 460, 536, 452, 540, 480, 512, 480, 516, 480, 512, 480, 512, 508, 1472, 516, 1468, 516, 1472, 512, 1476, 488, 2996, 2960, 8940, 504, 1504, 484, 532, 460, 536, 480, 512, 456, 536, 456, 536, 456, 540, 480, 512, 484, 508, 512, 1448, 536, 484, 508, 484, 512, 1448, 536, 484, 508, 1456, 528, 1476, 512, 1476, 508, 1480, 476, 1508, 500, 1488, 504, 488, 532, 484, 508, 484, 508, 484, 508, 484, 488, 484, 528, 488, 500, 492, 508, 484, 484, 512, 480, 512, 484, 532, 460, 536, 456, 536, 456, 536, 480, 512, 480, 512, 484, 512, 480, 512, 480, 512, 484, 512, 480, 516, 476, 512, 480, 512, 480, 516, 480, 512, 480, 512, 480, 516, 476, 516, 476, 516, 476, 544, 448, 544, 448, 548, 468, 524, 468, 524, 468, 524, 472, 2992, 2964, 8976, 472, 1516, 468, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 524, 468, 524, 472, 524, 468, 1544, 440, 552, 468, 524, 468, 524, 472, 1516, 468, 524, 468, 1516, 472, 520, 472, 1516, 468, 1516, 472, 1516, 468, 1520, 468, 1520, 464, 1544, 444, 1540, 468, 1520, 468, 524, 472, 520, 472, 520, 472, 1516, 472, 1512, 472, 1516, 468, 524, 468, 524, 472, 524, 468, 524, 468, 524, 468, 1544, 444, 1540, 472, 1516, 468, 524, 472, 1516, 468, 1516, 468, 524, 472, 1516, 468, 1516, 472, 524, 468, 524, 468, 548, 444, 548, 448, 548, 444, 552, 464, 528, 464, 1544, 444, 1540, 448, 1540, 444, 1540, 448},
    /* AC Temp 24 */ {568, 17808, 3024, 8932, 484, 516, 480, 1500, 512, 484, 508, 488, 508, 484, 508, 484, 508, 484, 512, 484, 508, 484, 508, 1476, 512, 480, 512, 484, 508, 1500, 480, 516, 480, 512, 480, 1500, 484, 1504, 512, 1472, 516, 1472, 512, 1472, 512, 488, 508, 484, 508, 484, 484, 508, 488, 504, 488, 508, 484, 532, 484, 512, 456, 536, 456, 536, 480, 512, 484, 512, 480, 512, 508, 484, 508, 484, 508, 488, 484, 508, 484, 508, 484, 508, 484, 508, 488, 508, 484, 508, 484, 508, 484, 536, 460, 532, 480, 512, 480, 516, 476, 516, 476, 516, 480, 512, 508, 484, 512, 484, 508, 1452, 536, 1448, 536, 1452, 532, 1456, 504, 2984, 3000, 8936, 508, 1480, 504, 512, 456, 536, 456, 536, 480, 512, 480, 516, 480, 512, 484, 508, 484, 508, 484, 1500, 488, 508, 484, 508, 484, 1500, 484, 512, 480, 1508, 480, 1528, 460, 1528, 452, 1532, 480, 1508, 480, 1504, 480, 516, 480, 512, 480, 512, 480, 516, 476, 516, 476, 516, 476, 516, 472, 524, 468, 524, 472, 520, 472, 524, 468, 548, 444, 552, 444, 548, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 472, 520, 472, 548, 444, 548, 448, 548, 464, 528, 468, 524, 468, 524, 472, 520, 472, 3044, 2912, 9004, 444, 1540, 444, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 468, 528, 468, 548, 444, 1568, 440, 528, 468, 524, 468, 528, 468, 524, 468, 1540, 444, 1544, 444, 524, 468, 1540, 448, 1540, 444, 1516, 468, 1544, 444, 1568, 416, 1568, 444, 1544, 444, 1540, 444, 528, 464, 528, 468, 548, 444, 1544, 440, 1544, 444, 1540, 444, 528, 468, 548, 444, 548, 444, 548, 444, 576, 420, 572, 420, 576, 440, 552, 444, 1540, 444, 1544, 444, 1540, 444, 548, 448, 1540, 444, 1540, 448, 544, 448, 548, 444, 548, 444, 548, 444, 548, 444, 576, 420, 572, 420, 1568, 420, 1568, 440, 1544, 444, 1544, 440},
    /* AC Temp 25 */ {568, 17828, 3028, 8912, 504, 512, 480, 1504, 488, 508, 508, 484, 512, 480, 512, 480, 512, 480, 512, 484, 508, 484, 508, 1476, 488, 508, 508, 512, 480, 1500, 484, 512, 484, 508, 480, 1504, 484, 1500, 512, 1476, 488, 1496, 488, 1496, 492, 508, 484, 508, 484, 508, 508, 488, 508, 484, 484, 536, 460, 532, 456, 536, 480, 512, 480, 512, 484, 512, 480, 512, 508, 484, 488, 504, 508, 488, 508, 484, 508, 484, 508, 484, 508, 484, 512, 484, 508, 484, 508, 484, 508, 484, 484, 536, 456, 540, 484, 508, 460, 532, 456, 536, 456, 536, 480, 516, 484, 508, 488, 504, 492, 1488, 496, 1492, 516, 1468, 520, 1468, 508, 2960, 2996, 8940, 516, 1492, 492, 508, 456, 536, 476, 516, 456, 536, 480, 512, 484, 512, 508, 484, 508, 484, 512, 1472, 512, 480, 512, 484, 508, 1476, 508, 488, 504, 1480, 508, 1504, 456, 1528, 456, 1528, 480, 1508, 480, 1508, 504, 488, 484, 508, 484, 508, 484, 508, 484, 512, 480, 512, 480, 512, 484, 512, 480, 512, 480, 512, 480, 540, 452, 540, 452, 544, 452, 540, 476, 516, 476, 516, 476, 520, 472, 520, 472, 520, 472, 524, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 472, 520, 468, 528, 468, 524, 468, 548, 444, 552, 464, 528, 468, 524, 468, 524, 472, 524, 468, 524, 468, 3020, 2940, 8976, 468, 1520, 468, 524, 468, 524, 468, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 552, 440, 1572, 440, 528, 464, 528, 468, 1540, 444, 1544, 444, 524, 468, 1540, 448, 524, 468, 1540, 444, 1520, 468, 1540, 444, 1540, 448, 1568, 440, 1544, 444, 1544, 440, 1544, 444, 552, 440, 548, 444, 552, 444, 1540, 444, 1540, 448, 1540, 444, 548, 444, 548, 448, 548, 444, 572, 420, 576, 420, 1564, 444, 548, 448, 548, 444, 1540, 444, 1544, 444, 1540, 444, 548, 444, 1544, 444, 1540, 444, 548, 448, 548, 444, 548, 444, 576, 416, 576, 420, 572, 420, 572, 420, 1568, 444, 1544, 440, 1544, 440, 1544, 444},
    /* AC Temp 26 */ {596, 17768, 3012, 8928, 484, 516, 508, 1472, 516, 484, 508, 484, 508, 484, 512, 480, 512, 484, 508, 484, 508, 484, 508, 1480, 508, 488, 504, 484, 508, 1500, 464, 532, 484, 508, 484, 1500, 484, 1500, 512, 1476, 488, 1496, 512, 1476, 512, 484, 484, 508, 508, 484, 488, 508, 484, 508, 508, 484, 508, 512, 480, 512, 456, 536, 456, 540, 480, 512, 480, 512, 504, 488, 512, 484, 484, 508, 504, 488, 484, 508, 484, 508, 484, 512, 480, 512, 484, 508, 484, 508, 488, 508, 484, 508, 500, 520, 460, 532, 508, 484, 480, 512, 460, 536, 480, 512, 484, 508, 516, 476, 516, 1448, 536, 1448, 540, 1448, 536, 1452, 500, 2984, 3004, 8932, 516, 1468, 516, 508, 484, 508, 456, 536, 456, 536, 480, 512, 480, 516, 484, 508, 508, 484, 508, 1456, 532, 484, 508, 484, 508, 1456, 532, 484, 508, 1476, 508, 1476, 508, 1508, 452, 1532, 480, 1504, 480, 1508, 484, 508, 484, 508, 484, 508, 484, 512, 480, 512, 480, 512, 480, 516, 476, 516, 480, 512, 480, 516, 476, 516, 476, 544, 448, 544, 448, 544, 444, 552, 468, 524, 468, 524, 472, 520, 472, 520, 472, 524, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 524, 472, 520, 472, 524, 468, 524, 468, 552, 444, 548, 444, 548, 468, 524, 468, 528, 468, 524, 468, 524, 472, 3016, 2940, 8976, 468, 1516, 472, 524, 468, 524, 468, 524, 468, 524, 472, 524, 468, 524, 468, 528, 464, 528, 468, 1544, 440, 552, 464, 528, 468, 1520, 468, 1516, 468, 524, 468, 1520, 468, 524, 468, 1540, 444, 1544, 444, 1540, 444, 1544, 444, 1568, 416, 1568, 444, 1544, 440, 1544, 444, 548, 448, 548, 444, 548, 444, 1540, 448, 1540, 444, 1540, 448, 544, 448, 548, 444, 548, 444, 548, 444, 576, 420, 572, 420, 1568, 416, 576, 444, 1540, 444, 1544, 444, 1540, 444, 548, 424, 1564, 444, 1544, 416, 576, 420, 572, 420, 572, 420, 600, 392, 600, 392, 604, 416, 576, 416, 1572, 416, 1568, 416, 1568, 420, 1568, 416}};

// TV (Philips)
const PROGMEM uint16_t tvPowerSignals[][TV_SIGNAL_SIZE] = {
    /* TV Power Off */ {888, 896, 1760, 876, 880, 876, 880, 876, 876, 880, 884, 872, 884, 872, 860, 900, 856, 1776, 884, 872, 1760, 876, 856, 24164, 912, 876, 1756, 876, 880, 876, 884, 872, 884, 876, 880, 876, 880, 876, 856, 900, 856, 1776, 884, 872, 1736, 900, 856, 24164, 916, 872, 1760, 872, 860, 900, 856, 900, 856, 900, 880, 876, 856, 900, 856, 900, 856, 1780, 880, 876, 1736, 896, 860},
    /* TV Power On */ {888, 896, 1760, 876, 880, 876, 880, 876, 876, 880, 884, 872, 884, 872, 860, 900, 856, 1776, 884, 872, 1760, 876, 856, 24164, 912, 876, 1756, 876, 880, 876, 884, 872, 884, 876, 880, 876, 880, 876, 856, 900, 856, 1776, 884, 872, 1736, 900, 856, 24164, 916, 872, 1760, 872, 860, 900, 856, 900, 856, 900, 880, 876, 856, 900, 856, 900, 856, 1780, 880, 876, 1736, 896, 860}};
const PROGMEM uint16_t tvChannelSignals[][TV_SIGNAL_SIZE] = {
    /* TV Channel HDMI 1 */ {888, 900, 1732, 900, 884, 872, 860, 896, 856, 1780, 856, 900, 880, 876, 856, 900, 856, 900, 1760, 876, 880, 1752, 884, 23232, 908, 876, 1736, 900, 880, 876, 860, 896, 880, 1756, 880, 876, 856, 900, 856, 900, 888, 868, 1760, 876, 880, 1752, 860, 23256, 888, 896, 1760, 876, 860, 896, 884, 872, 884, 1752, 884, 872, 880, 876, 860, 896, 884, 872, 1740, 896, 884, 1748, 884},
    /* TV Channel HDMI 2 */ {892, 896, 1764, 872, 884, 872, 884, 872, 884, 1748, 884, 872, 884, 876, 880, 876, 880, 876, 1760, 872, 884, 872, 884, 24136, 912, 872, 1760, 876, 884, 872, 884, 872, 884, 1748, 884, 876, 880, 876, 884, 872, 856, 900, 1760, 872, 884, 876, 880, 24136, 912, 876, 1760, 872, 884, 876, 880, 872, 884, 1752, 880, 876, 884, 872, 884, 872, 884, 872, 1760, 876, 880, 876, 880}};

#pragma endregion

/******************** Initial setup ********************/
#pragma region

void setup()
{
  // Initialize IR pins as outputs
  for (int i = 0; i < sizeof(irPins) / sizeof(irPins[0]); i++)
  {
    pinMode(irPins[i], OUTPUT);
  }

  // Serial
  Serial.begin(9600);
}

// print free RAM check for debugging. SRAM for ATmega328p = 2048Kb.
int availableMemory() 
{
  // Use 1024 with ATmega168
  int size = 2048;
  byte *buf;
  while ((buf = (byte *) malloc(--size)) == NULL);
      free(buf);
  return size;
}

void printFreeRam(String codePlaceName)
{
  Serial.print(String(F("Free RAM at [")) + codePlaceName + String(F("]: ")));
  Serial.println(availableMemory());
}

#pragma endregion

/******************** JSON Processing functions ********************/
#pragma region

// Using const String& to avoid duplicating string in runtime and consume less memory
void serializeToSerialTX(const String &messageType, const String &messageString, const int &messageValue, const int &messagePort)
{
  // Declare JSON document
  StaticJsonDocument<JSON_DOC_SIZE> jsonDoc;

  // Set the values of the JSON object
  jsonDoc[F("subsystem")] = messageType;
  jsonDoc[F("command")] = messageString;
  jsonDoc[F("value")] = messageValue;
  jsonDoc[F("port")] = messagePort;

  // Serialize the JSON object to the Serial out directly
  serializeJson(jsonDoc, Serial);
  // Print new line
  Serial.println("");
}

// Deserialize JSON string from RX buffer and check if error ocurred
int deserializeFromRxBuffer()
{
  // Deserialize JSON data from RX buffer and save to jsonDoc
  StaticJsonDocument<JSON_DOC_SIZE> jsonDoc;
  DeserializationError error = deserializeJson(jsonDoc, rxBuffer);

  // Clear RX buffer
  rxBuffer = "";

  // If error is found, print it and return function
  if (error)
  {
    serializeToSerialTX(F("error"), String(F("JSON Parse: ")) + String(error.c_str()), 0, 0);
    return -1;
  }

  // If everything is ok, save the json property values to global variables and return 1
  commandSubsystem = jsonDoc[F("subsystem")].as<String>();
  commandType = jsonDoc[F("command")].as<String>();
  commandValue = jsonDoc[F("value")].as<int>();
  commandPort = jsonDoc[F("port")].as<int>();

  // printFreeRam(F("deserializeFromRxBuffer end"));
  return 1;
}

#pragma endregion

/******************** IR processing functions ********************/
#pragma region

// Send defined signal from PROGMEM to IR pin
void sendNextSignal(const PROGMEM uint16_t irSignal[], const int &length, const int &pinNumber)
{
  // Create IR sender
  IRsend irsend;
  // Start it to desired I/O port
  irsend.begin(pinNumber, ENABLE_LED_FEEDBACK);
  // Use sendRaw_P to send raw bit change timings, from PROGMEM variable. (sendRaw send a variable from RAM)
  irsend.sendRaw_P(irSignal, length, NEC_KHZ);
  // Small delay to avoid that two different IR signals get identified as one by IRSend
  delay(10);
}

#pragma endregion

/******************** Check serial RX function ********************/
#pragma region

// Check for expected commands
void evaluateCommand()
{
  // HVAC Power commands
  if (commandSubsystem == F("HVAC") && commandType == F("Power") && commandValue >= 0 && commandValue <= 0 && commandPort >= 1 && commandPort <= 4)
  {
    sendNextSignal(hvacPowerSignals[commandValue], HVAC_SIGNAL_SIZE, irPins[commandPort - 1]);
  }
  // HVAC Temperature commands
  else if (commandSubsystem == F("HVAC") && commandType == F("Temperature") && commandValue >= 18 && commandValue <= 26 && commandPort >= 1 && commandPort <= 4)
  {
    sendNextSignal(hvacTempSignals[commandValue - 18], HVAC_SIGNAL_SIZE, irPins[commandPort - 1]);
  }
  // TV Power commands
  else if (commandSubsystem == F("TV") && commandType == F("Power") && commandValue >= 0 && commandValue <= 1 && commandPort >= 1 && commandPort <= 4)
  {
    sendNextSignal(tvPowerSignals[commandValue], TV_SIGNAL_SIZE, irPins[commandPort - 1]);
  }
  // TV Channel commands
  else if (commandSubsystem == F("TV") && commandType == F("Channel") && commandValue >= 1 && commandValue <= 2 && commandPort >= 1 && commandPort <= 4)
  {
    sendNextSignal(tvChannelSignals[commandValue], TV_SIGNAL_SIZE, irPins[commandPort - 1]);
  }
  // Unrecognized command
  else
  {
    serializeToSerialTX(F("unknownCommand"), commandSubsystem + String(F(" ")) + commandType, commandValue, commandPort);
    return;
  }

  // If no error, command was successfull
  serializeToSerialTX(F("commandAccepted"), commandSubsystem + String(F(" ")) + commandType, commandValue, commandPort);
}

void checkSerial()
{
  // Read all bytes from serial port, one by one
  while (Serial.available())
  {
    // Read byte
    char c = Serial.read();

    // If terminator character is found, command is fully received
    if (c == '$')
    {
      // If JSON deserialization succeded, evaluate received command and if valid, send to IR pin
      if (deserializeFromRxBuffer() == 1)
      {
        evaluateCommand();
      }
    }
    else
    {
      // If current read char from serial port is not terminato character, append it to RX buffer and continue read loop
      rxBuffer += c;
    }
  }
}

#pragma endregion

/******************** Program loop ********************/
#pragma region

void loop()
{
  // Check serial port RX
  checkSerial();

  // delay(2000);
}

#pragma endregion
